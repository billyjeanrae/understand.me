-- Migration: Add document_embeddings table for RAG service
-- Created: 2025-07-02
-- Description: Creates the document_embeddings table with pgvector support for storing text embeddings

-- Enable the pgvector extension for vector similarity search
CREATE EXTENSION IF NOT EXISTS vector;

-- Create the document_embeddings table
CREATE TABLE IF NOT EXISTS public.document_embeddings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    content TEXT NOT NULL,
    embedding VECTOR(768) NOT NULL, -- Gemini text-embedding-004 produces 768-dimensional vectors
    metadata JSONB DEFAULT '{}',
    source TEXT,
    chunk_index INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS document_embeddings_embedding_idx ON public.document_embeddings 
USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

CREATE INDEX IF NOT EXISTS document_embeddings_source_idx ON public.document_embeddings (source);
CREATE INDEX IF NOT EXISTS document_embeddings_created_at_idx ON public.document_embeddings (created_at);
CREATE INDEX IF NOT EXISTS document_embeddings_metadata_idx ON public.document_embeddings USING GIN (metadata);

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_document_embeddings_updated_at 
    BEFORE UPDATE ON public.document_embeddings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create a function for similarity search (used by the RAG service)
CREATE OR REPLACE FUNCTION match_documents(
    query_embedding VECTOR(768),
    match_threshold FLOAT DEFAULT 0.1,
    match_count INT DEFAULT 5,
    filter_source TEXT DEFAULT NULL
)
RETURNS TABLE (
    id UUID,
    content TEXT,
    metadata JSONB,
    source TEXT,
    similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        document_embeddings.id,
        document_embeddings.content,
        document_embeddings.metadata,
        document_embeddings.source,
        1 - (document_embeddings.embedding <=> query_embedding) AS similarity
    FROM document_embeddings
    WHERE 
        (filter_source IS NULL OR document_embeddings.source = filter_source)
        AND 1 - (document_embeddings.embedding <=> query_embedding) > match_threshold
    ORDER BY document_embeddings.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Create RLS (Row Level Security) policies
ALTER TABLE public.document_embeddings ENABLE ROW LEVEL SECURITY;

-- Policy: Allow authenticated users to read all embeddings
CREATE POLICY "Allow authenticated users to read embeddings" ON public.document_embeddings
    FOR SELECT USING (auth.role() = 'authenticated');

-- Policy: Allow authenticated users to insert embeddings
CREATE POLICY "Allow authenticated users to insert embeddings" ON public.document_embeddings
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Policy: Allow authenticated users to update embeddings
CREATE POLICY "Allow authenticated users to update embeddings" ON public.document_embeddings
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Policy: Allow authenticated users to delete embeddings
CREATE POLICY "Allow authenticated users to delete embeddings" ON public.document_embeddings
    FOR DELETE USING (auth.role() = 'authenticated');

-- Grant necessary permissions
GRANT ALL ON public.document_embeddings TO authenticated;
GRANT ALL ON public.document_embeddings TO service_role;

-- Create a view for embedding statistics
CREATE OR REPLACE VIEW public.embedding_stats AS
SELECT 
    source,
    COUNT(*) as total_chunks,
    AVG(LENGTH(content)) as avg_chunk_length,
    MIN(created_at) as first_created,
    MAX(updated_at) as last_updated
FROM public.document_embeddings 
GROUP BY source;

-- Grant access to the stats view
GRANT SELECT ON public.embedding_stats TO authenticated;
GRANT SELECT ON public.embedding_stats TO service_role;

-- Add helpful comments
COMMENT ON TABLE public.document_embeddings IS 'Stores text embeddings for RAG (Retrieval Augmented Generation) functionality';
COMMENT ON COLUMN public.document_embeddings.embedding IS 'Vector embedding generated by Gemini text-embedding-004 model (768 dimensions)';
COMMENT ON COLUMN public.document_embeddings.metadata IS 'Additional metadata about the document chunk (token count, etc.)';
COMMENT ON COLUMN public.document_embeddings.source IS 'Source identifier for organizing documents (e.g., knowledge_base, user_docs)';
COMMENT ON COLUMN public.document_embeddings.chunk_index IS 'Index of this chunk within the original document';
COMMENT ON FUNCTION match_documents IS 'Performs vector similarity search using cosine distance';

